; https://snarfed.org/dotfiles/.emacs
; Ryan Barrett's .emacs  -*- emacs-lisp -*-
; dotemacs@ryanb.org

; extra major modes!
; for the R language
(require 'ess)
(require 'ess-comp)
(require 'ess-r-d)


(require 'sh-script)
(require 'shell)


; C-F11 to compile
(global-set-key [(control f11)] 'compile)


(defun my-recompile ()
  "Save all buffers and force recompile using the last command.

  Also save the last compilation buffer into *compilation*<last>."
  (interactive)
  (save-some-buffers t)
  (ignore-errors (kill-process "*compilation*"))
  (if (get-buffer "*compilation*<last>")
      (kill-buffer "*compilation*<last>"))
  (let ((orig-win (selected-window))
        (compilation-win (get-buffer-window "*compilation*" t)))
    ;; wish i could use save-window-excursion but it only covers the current
    ;; frame, not all frames. :/
    (when compilation-win
      (select-window compilation-win)
      (rename-buffer "*compilation*<last>")
      (set-variable 'next-error-function nil t)
      (bury-buffer)
      (select-window orig-win))
    (recompile)
    (when compilation-win
      (replace-buffer-in-windows "*compilation*")
      (set-window-buffer compilation-win "*compilation*"))))
(global-set-key [(f11)] 'my-recompile)




; C-c C-k to kill the current compilation
(global-set-key [(control c) (control k)] 'kill-compilation)

;; python-mode steals C-c C-k for python-mark-block. steal it back.
(require 'python)
(define-key python-mode-map [(control c) (control k)] 'kill-compilation)







(require 'git-link)
(custom-set-variables '(git-link-open-in-browser t))
(define-prefix-command 'github-keymap)
(global-set-key [(control x) (g)] 'github-keymap)




; don't highlight trailing whitespace in some modes
(dolist (hook '(shell-mode-hook compilation-mode-hook diff-mode-hook))
  (add-hook hook (lambda () (set-variable 'show-trailing-whitespace nil))))


(global-set-key [(f1) (p)]
  (lambda () (interactive) (bury-then-switch-to-buffer "*Python*")))







(defun kill-new--strip-leading-diff-chars (&rest args)
  "When copying from a diff buffer, strip the leading -, +, ! characters."
  (cons (if (eq major-mode 'diff-mode)
            (replace-regexp-in-string "^." "" (caar args))
          (caar args))
        (cdar args)))
(advice-add 'kill-new :filter-args #'kill-new--strip-leading-diff-chars)







