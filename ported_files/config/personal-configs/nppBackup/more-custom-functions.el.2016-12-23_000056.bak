;;; more-custom-functions.el
; http://www.cibinmathew.com
; github.com/cibinmathew
(defvar search_list_count 0)
(defun mp-add-python-keys ()
  (interactive)
  (setq search_list_count 0)
       (message "%s" search_list_count)
       (add-hook 'ido-setup-hook  (lambda ()
                                    (define-key ido-completion-map (kbd "\C-c q") 'set-default-compiler-python )))
       (set-default-compiler-python )

       )
  (message "asfa")
  (global-set-key (kbd "C-x t") 'mp-add-python-keys)

(defun set-default-compiler-python ()
    "Find a recent file using ido."
    (interactive)
    (setq search_list_count (+ 1 search_list_count))
    (message "%s" search_list_count)
    (if (eq 1 search_list_count)
        (message "first call")
      (progn
                                        ;(exit-minibuffer)
                                        ;(ido-exit-minibuffa )
        (message "exiting old")
        (minibuffer-keyboard-quit)
        (setq ido-exit nil)
        (message "exited old minibuffer")
        ))
    (message "opening ido prompt")
  (let ((file 
  (ido-completing-read "choose? " (list "C:/Program Files (x86)/Python35-32/python.exe"
  (format "C:/Users/%s/AppData/Local/Programs/Python/Python35-32/python.exe" user-login-name)
  (format "C:/Users/%s/AppData/Local/Continuum/Anaconda3_32/python.exe" user-login-name)
  (format "C:/Users/%s/AppData/Local/Continuum/Anaconda3_1/python.exe" user-login-name)
  "C:/Python27/python.exe" 
  (format "C:/Users/%s/AppData/Local/Continuum/Anaconda2/python.exe" user-login-name)
  ))))
    (when file
(setq python-shell-interpreter  file)
(message "%s" python-shell-interpreter)))
)

(defun open-common-executable ()
" all python.exe, pips paths"
(interactive)
)


; http://stackoverflow.com/questions/17164767/emacs-lisp-directory-files  
(defun cibin-common-find-file ()
	"Find a recent file using ido."
	(interactive)

	"Like `directory-files' with MATCH hard-coded to exclude \".\" and \"..\"."
	
	 
	(setq regex-filter "^\\(\\(.*\\.txt\\)\\|\\(.*\\.py\\)\\|\\(.*\\.el\\)\\|\\(.*\\.java\\)\\|\\(.*\\.ahk\\)\\|\\(.*\\.ini\\)\\|\\(.*\\.sh\\)\\)$")
	(setq foldercontent-of-this-file nil)
	(setq foldercontent-of-parent-of-this-file nil)
	; if buffer is not a special buffer
	(when  buffer-file-name
		(setq parent-directory-this-file (directory-file-name (file-name-directory buffer-file-name)))
		(setq parent-of-parent-directory-this-file (directory-file-name (file-name-directory parent-directory-this-file)))
		
		(setq foldercontent-of-this-file (directory-files (directory-file-name (file-name-directory buffer-file-name)) t "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)"))
		(setq foldercontent-of-parent-of-this-file (directory-files  parent-of-parent-directory-this-file t regex-filter))
	)
	
	(setq recent-dirs nil)
	(setq recent-dirs 
	(delete-dups
          (mapcar (lambda (file)
                    (if (file-directory-p file) file (file-name-directory file)))
                  recentf-list))
				  )
	; FIXME
	; index contents of first level subfolders of this file also
	(setq recent-dirs (append foldercontent-of-this-file (last (reverse recent-dirs) 5) ))
  (setq all-recent-dirs-foldercontent nil)
	; REMOVE below 2lines
	; (setq recent-dirs nil)
	; (setq recentf-list nil)
	(dolist (dir recent-dirs) 
				   ; (message "exist %s" (file-exists-p dir))
		(when (file-exists-p dir)		
		
		; "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)"
			(setq foldercontent (directory-files dir t regex-filter))
			(setq all-recent-dirs-foldercontent (append all-recent-dirs-foldercontent foldercontent))
		)
		
	)
	(setq all-files (append foldercontent-of-this-file recentf-list foldercontent-of-parent-of-this-file all-recent-dirs-foldercontent ))
  (message "%s" (safe-length all-files))
  (setq all-files (sort all-files  (lambda (a b) 
        (time-less-p 
                     (nth 6 (file-attributes b))
		(nth 6 (file-attributes a))
					 ))))	
					 
					 ; (sort all-files #'< :key (lambda (a b) 
        ; (time-less-p 
                     ; (nth 6 (file-attributes b))
		; (nth 6 (file-attributes a))
					 ; ))) 
  
	(let ((file (ido-completing-read "related files: " 
                               (mapcar #'abbreviate-file-name all-files)
                               nil t)))
    (when file
      (find-file file))))

	  
	  ; reformat XML code adding the following code in your .emacs:
(require 'sgml-mode)

(defun reformat-xml ()
"Reformat XML on Emacs "
  (interactive)
  (save-excursion
    (sgml-pretty-print (point-min) (point-max))
    (indent-region (point-min) (point-max))))

	
(defun cibin/launcher ()
    "Find a recent file using ido."
    (interactive)

  (let ((file 
  (ido-completing-read "choose? " (list "C:/Users/cibin/AppData/Roaming/BitTorrent/BitTorrent.exe" "D:/music/Pathirayo Pakalai.BACHELOR PARTY.mp3")
 )))
    (when file
(cibin/spacemacs//open-in-external-app file)))
)	
(defun cibin/music ()
    "Find a recent file using ido."
    (interactive)

  (let ((file 
  ; (ido-completing-read "choose? " (list "D:/music/Nee Manimukil.mp3" "D:/music/Party-On-My-Mind-(Race-2)-KK-n-Honey-Singh-(Pagalworld.Com).mp3" "D:/music/Pathirayo Pakalai.BACHELOR PARTY.mp3"
  (ido-completing-read "choose? " 

(delete-dups
   (mapcar 'abbreviate-file-name
           
            (read-file-into-lines "~/music.db")
            ))
  )))
    (when file
(cibin/spacemacs//open-in-external-app file)))
)
(defun read-file-into-lines (filename)
  "Read file, split into lines, return a list"
  (with-temp-buffer
    (insert-file-contents filename)
    (split-string (buffer-substring-no-properties (point-min) (point-max)) "\n" t)))
	
(defun cibin/spacemacs//open-in-external-app (file-path)
  "Open `file-path' in external application."
  (cond
   ((spacemacs/system-is-mswindows) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\\\" file-path)))
   ((spacemacs/system-is-mac) (shell-command (format "open \"%s\"" file-path)))
   ((spacemacs/system-is-linux) (let ((process-connection-type nil))
                                  (start-process "" nil "xdg-open" file-path)))))
								  

; delete till non whitespace
(global-set-key (kbd "M-SPC") 'fc/delete-space)
; (global-set-key (kbd "<M-Spc>") 'fixup-whitespace)
(global-set-key (kbd "C-c M-d") 'fc/delete-space)

(defun fc/delete-space ()
  "Remove all space around point.
Calling this repeatedly will clean more and more whitespace.
First, it will clear all whitespace until the end of the line, if
any. Then it will clear whitespace to the beginning of the line.
Then it will clear all following whitespace over any number of
lines. And then it will clear all preceding whitespace."
  (interactive)
  (cond
   ((looking-at "[ \t]+")
    (replace-match ""))
   ((looking-back "[ \t]")
    (let ((start (point)))
      (skip-chars-backward " \t")
      (delete-region (point) start)))
   ((looking-at "[ \t\n]+")
    (replace-match ""))
   ((looking-back "[ \t\n]")
    (let ((start (point)))
      (skip-chars-backward " \t\n")
      (delete-region (point) start)))))

	  
 (global-set-key (kbd "C-c C-u") 'fc/kill-to-beginning-of-line)
(defun fc/kill-to-beginning-of-line ()
  "Kill from the beginning of the line to point."
  (interactive)
  (kill-region (point-at-bol)
               (point)))		

; Popwin is a popup window manager for Emacs which makes you free from the hell of annoying buffers such like Help, Completions, compilation, and etc.

(use-package popwin
  :ensure t
  :config
  (popwin-mode 1)
  (setq popwin:popup-window-height 35
        popwin:special-display-config
        '(("*Miniedit Help*" :noselect t)
          (help-mode :noselect nil)
          (completion-list-mode :noselect t)
          (compilation-mode :noselect nil)
          (grep-mode :noselect t)
          (occur-mode :noselect t)
          ("*Pp Macroexpand Output*" :noselect t)
          ("*Shell Command Output*")
          ("*Async Shell Command*")
          ("*vc-diff*")
          ("*vc-change-log*")
          (" *undo-tree*" :width 60 :position right)
          ("^\\*anything.*\\*$" :regexp t)
          ("*slime-apropos*")
          ("*slime-macroexpansion*")
          ("*slime-description*")
          ("*slime-compilation*" :noselect t)
          ("*slime-xref*")
          ("*Flycheck errors*")
          ("*Warnings*")
          ("*Error*")
          ("*Process List*")
          ("*Smex: Unbound Commands*")
          ("*Paradox Report*" :noselect nil)
          ("*Package Commit List*" :noselect nil)
          ("*Diff*" :noselect nil)
          ("*Messages*" :noselect nil)
          ("*Google Maps*" :noselect nil)
          ("*ag search*" :noselect nil)
          ("*PDF-Occur*" :noselect nil)
          ("*PDF-Metadata*" :noselect nil)
          ("^\\*Outline .*\\.pdf\\*$" :regexp t :noselect nil)
          ("*MULTI-TERM-DEDICATED*" :noselect nil :stick t)
          (sldb-mode :stick t)
          (slime-repl-mode)
          (slime-connection-list-mode)))

  (add-hook 'popwin:after-popup-hook 'turn-off-evil-mode)
  (bind-keys :map popwin:window-map
             ((kbd "<escape>") . popwin:close-popup-window)))








			   
(provide 'more-custom-functions)