

 ;; TODO debug this
 
 ; ===============================
 ;;; highlight-focus.el --- highlight the active buffer

;; Author: Amit J Patel <amitp@cs.stanford.edu>

;;; Commentary:
;; 
;; I find that I'm not good at tracking when focus changes across
;; apps, windows, and within a window. As much as possible, I try to
;; have all my applications somehow draw attention to what has
;; focus. In X11 I marked the focus in red. In Firefox I marked the
;; text fields in yellow. This Emacs package highlights the active
;; buffer. It's inspired by an earlier package I had written for
;; XEmacs, which changes the window color and modeline color for the
;; current window.
;;
;;; History:
;;
;; 2014-05-07: Updated to use the Emacs 24 focus-{in,out}-hook
;; 2013-05-10: Rewritten to use the Emacs 23 "remap faces" feature.
;; 2007-04-16: Initial version, temporarily highlighting the active buffer

;; Also see <https://github.com/emacsmirror/auto-dim-other-buffers>

;;; Code:

;; (require 'face-remap)
;; (defvar highlight-focus:last-buffer nil)
;; (defvar highlight-focus:cookie nil)
;; (defvar highlight-focus:background "red")
;; (defvar highlight-focus:app-has-focus t)

;; (defun highlight-focus:check ()
  ;; "Check if focus has changed, and if so, update remapping."
  ;; (let ((current-buffer (and highlight-focus:app-has-focus (current-buffer))))
    ;; (unless (eq highlight-focus:last-buffer current-buffer)
      ;; (when (and highlight-focus:last-buffer highlight-focus:cookie)
        ;; (with-current-buffer highlight-focus:last-buffer
          ;; (face-remap-remove-relative highlight-focus:cookie)))
      ;; (setq highlight-focus:last-buffer current-buffer)
      ;; (when current-buffer
        ;; (setq highlight-focus:cookie
              ;; (face-remap-add-relative 'default :background highlight-focus:background))))))

;; (defun highlight-focus:app-focus (state)
  ;; (setq highlight-focus:app-has-focus state)
  ;; (highlight-focus:check))

;; (defadvice other-window (after highlight-focus activate)
  ;; (highlight-focus:check))
;; (defadvice select-window (after highlight-focus activate)
  ;; (highlight-focus:check))
;; (defadvice select-frame (after highlight-focus activate)
  ;; (highlight-focus:check))
;; (add-hook 'window-configuration-change-hook 'highlight-focus:check)

;; (add-hook 'focus-in-hook (lambda () (highlight-focus:app-focus t)))
;; (add-hook 'focus-out-hook (lambda () (highlight-focus:app-focus nil)))




(require 'highlight-thing)
(global-highlight-thing-mode)
; Alternatively you can use the buffer-local version:
; (add-hook 'prog-mode-hook 'highlight-thing-mode)
; The default is to highlight the symbol under point, but you can customize hightlight-thing-what-thing to highlight different components. Set the following to only highlight the word under point:
; (setq highlight-thing-what-thing 'word)
(setq highlight-thing-delay-seconds 1.0)
; You can configure the matching of occurrences to be case-sensitive via the following setting:
; (setq highlight-thing-case-sensitive-p t)
; If you want all the matches highlighted but not the one occurrence at the point itself, you can do so by:
(setq highlight-thing-exclude-thing-under-point t)

 (require 'mic-paren) ; loading
     (paren-activate)     ; activating
	 ; TODO http://emacs.stackexchange.com/questions/5569/disable-mic-paren-in-the-minibuffer-or-at-least-in-ido

;; active and inactive buffer mode-line	 
(set-face-attribute  'mode-line
                 nil 
                 :foreground "gray80"
                 :background "#258b29" 
                 ;; :background "#2e8b57" 
                 :box '(:line-width 1 :style released-button))
(message "hellllllloooo")
(set-face-attribute  'mode-line-inactive
                 nil 
                 :foreground "gray30"
                 :background "gray15" 
                 :box '(:line-width 1 :style released-button))
	 
; (load-file "~/.emacs.d/my-files/config/others/theme-changer.el")
; (require 'theme-changer)
; (setq calendar-location-name "Dallas, TX") 
; (setq calendar-latitude 32.85)
; (setq calendar-longitude -96.85)
;;; Specify the day and night themes:
; (change-theme 'solarized-light 'solarized-dark) 


;; <Color theme initialization code>
(setq current-theme '(color-theme-solarized-light))

(defun cibin/synchronize-theme() 
      (setq now 'solarized-dark)
    (setq hour (string-to-number (substring (current-time-string) 11 13)))
    (if (member hour (number-sequence 6 17)) (setq now 'solarized-light) nil)
    (if (member hour (number-sequence 18 19)) (setq now 'solarized-light) nil)
      
    (message (format "new theme is %s" now))
    (if (eq now current-theme)
        nil
        (setq current-theme now)
        (load-theme now t) ) ) ;; end of (defun ...
(run-with-timer 0 3600 'cibin/synchronize-theme)
