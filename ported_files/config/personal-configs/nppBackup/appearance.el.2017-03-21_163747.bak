

; more customisations at https://www.emacswiki.org/emacs/TabBarMode
; Speed up by not using images

; Tabbar can slow down Emacs considerably, especially simply moving the cursor up or down. This can be rectified by adding this to your .emacs file, which makes Tabbar use characters to represent the three images in the top-left corner:

 (setq tabbar-use-images nil)

(require 'tabbar)
 (tabbar-mode)
 
 
; http://amitp.blogspot.in/2007/04/emacs-buffer-tabs.html
;; Note: for tabbar 2.0 use 
;; tabbar-default not tabbar-default-face,
;; tabbar-selected not tabbar-selected-face,
;; tabbar-button not tabbar-button-face,
;; tabbar-separator not tabbar-separator-face

;; TODO uncomment faces below
;; Tabbar
(require 'tabbar)
;; Tabbar settings
(set-face-attribute
 'tabbar-default nil
 :background "gray20"
 :foreground "gray2"
 :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute
 'tabbar-unselected nil
 :background "gray30"
 :foreground "white"
 :box '(:line-width 3 :color "gray30" :style nil))
(set-face-attribute
 'tabbar-selected nil
 :background "green"
 :foreground "black"
 :box '(:line-width 3 :color "green" :style nil))
(set-face-attribute
 'tabbar-highlight nil
 :background "white"
 :foreground "black"
 :underline nil
 :box '(:line-width 53 :color "white" :style nil))
(set-face-attribute
 'tabbar-button nil
 :box '(:line-width 1 :color "gray25" :style nil))
(set-face-attribute
 'tabbar-separator nil
 :background "gray20"
 :height 0.4)

;; Change padding of the tabs
;; we also need to set separator to avoid overlapping tabs by highlighted tabs
(custom-set-variables
 '(tabbar-separator (quote (0.5))))
;; adding spaces
(defun tabbar-buffer-tab-label (tab)
  "Return a label for TAB.
That is, a string used to represent it on the tab bar."
  (let ((label  (if tabbar--buffer-show-groups
                    (format "[%s]  " (tabbar-tab-tabset tab))
                  (format "%s  " (tabbar-tab-value tab)))))
    ;; Unless the tab bar auto scrolls to keep the selected tab
    ;; visible, shorten the tab label to keep as many tabs as possible
    ;; in the visible area of the tab bar.
    (if tabbar-auto-scroll-flag
        label
      (tabbar-shorten
       label (max 1 (/ (window-width)
                       (length (tabbar-view
                                (tabbar-current-tabset)))))))))
 
 ;; TODO debug this
 
 ; ===============================
 ;;; highlight-focus.el --- highlight the active buffer

;; Author: Amit J Patel <amitp@cs.stanford.edu>

;;; Commentary:
;; 
;; I find that I'm not good at tracking when focus changes across
;; apps, windows, and within a window. As much as possible, I try to
;; have all my applications somehow draw attention to what has
;; focus. In X11 I marked the focus in red. In Firefox I marked the
;; text fields in yellow. This Emacs package highlights the active
;; buffer. It's inspired by an earlier package I had written for
;; XEmacs, which changes the window color and modeline color for the
;; current window.
;;
;;; History:
;;
;; 2014-05-07: Updated to use the Emacs 24 focus-{in,out}-hook
;; 2013-05-10: Rewritten to use the Emacs 23 "remap faces" feature.
;; 2007-04-16: Initial version, temporarily highlighting the active buffer

;; Also see <https://github.com/emacsmirror/auto-dim-other-buffers>

;;; Code:

;; (require 'face-remap)
;; (defvar highlight-focus:last-buffer nil)
;; (defvar highlight-focus:cookie nil)
;; (defvar highlight-focus:background "red")
;; (defvar highlight-focus:app-has-focus t)

;; (defun highlight-focus:check ()
  ;; "Check if focus has changed, and if so, update remapping."
  ;; (let ((current-buffer (and highlight-focus:app-has-focus (current-buffer))))
    ;; (unless (eq highlight-focus:last-buffer current-buffer)
      ;; (when (and highlight-focus:last-buffer highlight-focus:cookie)
        ;; (with-current-buffer highlight-focus:last-buffer
          ;; (face-remap-remove-relative highlight-focus:cookie)))
      ;; (setq highlight-focus:last-buffer current-buffer)
      ;; (when current-buffer
        ;; (setq highlight-focus:cookie
              ;; (face-remap-add-relative 'default :background highlight-focus:background))))))

;; (defun highlight-focus:app-focus (state)
  ;; (setq highlight-focus:app-has-focus state)
  ;; (highlight-focus:check))

;; (defadvice other-window (after highlight-focus activate)
  ;; (highlight-focus:check))
;; (defadvice select-window (after highlight-focus activate)
  ;; (highlight-focus:check))
;; (defadvice select-frame (after highlight-focus activate)
  ;; (highlight-focus:check))
;; (add-hook 'window-configuration-change-hook 'highlight-focus:check)

;; (add-hook 'focus-in-hook (lambda () (highlight-focus:app-focus t)))
;; (add-hook 'focus-out-hook (lambda () (highlight-focus:app-focus nil)))




(require 'highlight-thing)
(global-highlight-thing-mode)
; Alternatively you can use the buffer-local version:
; (add-hook 'prog-mode-hook 'highlight-thing-mode)
; The default is to highlight the symbol under point, but you can customize hightlight-thing-what-thing to highlight different components. Set the following to only highlight the word under point:
; (setq highlight-thing-what-thing 'word)
(setq highlight-thing-delay-seconds 1.0)
; You can configure the matching of occurrences to be case-sensitive via the following setting:
; (setq highlight-thing-case-sensitive-p t)
; If you want all the matches highlighted but not the one occurrence at the point itself, you can do so by:
(setq highlight-thing-exclude-thing-under-point t)

 (require 'mic-paren) ; loading
     (paren-activate)     ; activating
	 ; TODO http://emacs.stackexchange.com/questions/5569/disable-mic-paren-in-the-minibuffer-or-at-least-in-ido

;; active and inactive buffer mode-line	 
(set-face-attribute  'mode-line
                 nil 
                 :foreground "gray80"
                 :background "#258b29" 
                 ;; :background "#2e8b57" 
                 :box '(:line-width 1 :style released-button))
(set-face-attribute  'mode-line-inactive
                 nil 
                 :foreground "gray30"
                 :background "gray15" 
                 :box '(:line-width 1 :style released-button))
	 
; (load-file "~/.emacs.d/my-files/config/others/theme-changer.el")
; (require 'theme-changer)
; (setq calendar-location-name "Dallas, TX") 
; (setq calendar-latitude 32.85)
; (setq calendar-longitude -96.85)
;;; Specify the day and night themes:
; (change-theme 'solarized-light 'solarized-dark) 
